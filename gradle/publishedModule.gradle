apply plugin: "artifactory-publish"
apply plugin: "maven-publish"
apply from: "$rootDir/gradle/credentials.gradle"

task sourceJar(type: Jar) {
    description "An archive of the source code"
    classifier "sources"
    from sourceSets.main.allJava, sourceSets.main.resources
}

task javadocJar(type: Jar) {
    description "An archive of the JavaDocs"
    classifier "javadoc"
    from javadoc
}

artifacts {
    archives sourceJar, javadocJar
}

artifactory {
    contextUrl = "http://oss.jfrog.org/"
    publish {
        repository {
            repoKey = isSnapshot ? "oss-snapshot-local" : "oss-release-local"
            username = bintrayUsername
            password = bintrayApiKey
        }
    }
}

def pomConfig = {
    name project.name
    description project.description
    url "https://github.com/cowboygneox/betamax"
    inceptionYear "2011"
    licenses {
        license([:]) {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    scm {
        url "https://github.com/cowboygneox/betamax"
        connection "https://github.com/cowboygneox/betamax.git"
        developerConnection "scm:git@github.com:cowboygneox/betamax.git"
    }
    developers {
        developer {
            id "cowboygneox"
            name "Sean Freitag"
            url "https://github.com/cowboygneox/betamax"
            roles {
                role "Developer"
                role "Lead"
            }
        }
        developer {
            id "robfletcher"
            name "Rob Fletcher"
            url "http://freeside.co/"
            roles {
                role "Founder"
            }
        }
    }
}

publishing {
    publications {
        mavenCustom(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar

            pom.withXml {
                asNode().dependencies.dependency.each { dep ->
                    if (dep.scope.text() in ["runtime", "test"]) {
                        dep.remove(dep.scope)
                    }
                    if (dep.artifactId.text() == "junit") {
                        println "boom"
                        dep.appendNode("scope", "provided")
                    }
                }
                asNode().children().last() + pomConfig
            }
        }
    }
}
